android中的数据库的使用
	sqlite数据库
		大量的结构相同的数据,工作的效率很高
		!!!sqlite 轻量级的数据库 以文件的形式存储的数据
		!!!sqlite在存储数据时，不区分数据类型，都是字符串存储。但是还是要尽量严格的写好类型,增强代码可读性。
		
	一.sqlite数据库的使用
	1.获取数据库Database
	!!!SQLiteOpenHelper抽象类(实现create和update方法,两个构造方法有参)，提供 getReadableDatabase()和 getWritableDatabase()获取数据库(唯一区别就是加锁否)
	SQLiteOpenHelper对象并不创建数据库文件，真正获取数据库时才会创建。创建的数据库保存在 data/date/包名/databases/db1.db
		SQLiteOpenHelper(Context context, String name, CursorFactory factory, int version) 该类用来获取数据库（存在则打开，不存在则创建）
					name是数据库文件名字，CursorFactory是数据库游标工厂，一般默认用null即可。version则是表示数据库版本，如果版本更新，则会触发onUpgrade方法。
		写一个类继承SQLiteOpenHelper抽象类，实现方法（2个必须，1个可选）
			onCreate(SQLiteDatabase)
				在数据库第一次被创建时触发,可以做一些数据库初始化操作(创建数据库和表)
			onUpgrade(SQLiteDatabase, int, int)
				数据库版本更新时触发。
			onOpen(SQLiteDatabase)
				可选。打开数据库时触发。
			
		MySQLiteOpenHelper helper = new MySQLiteOpenHelper(this, "db1.db",null , 2);
		SQLiteDatabase db = helper.getReadableDatabase();//可以用来执行读的操作,底层不加锁
		SQLiteDatabase db2 = helper.getWritableDatabase();//可以用来执行写的操作,底层会加锁
	
	2.使用数据库
	案例：对info表(id,name,money)进行增删改查
	
	(1)自己写sql实现增删改查的操作。 !!sql语句不要分号
		增加 删除 修改 db.execSQL()
		SQLiteDatabase.execSQL(String sql, Object[] bindArgs) throws SQLException	参数二经常是new Object[]{888,"aa"}这种形式
		查询  db.rawQuery	cursor.moveToNext()	cursor.getInt(0)通过索引或名字获得值	cursor.getColumnIndex("name")返回索引
		Cursor SQLiteDatabase.rawQuery(String sql, String[] selectionArgs)

			优点:
				sql可以非常的灵活,可以执行任意形式的语句
			缺点:
				需要自己写sql稍微麻烦些,容易出错.
				没有返回值来带回新增行号 和 影响到的行数
			
	(2)用android提供API的进行增删改查
	!!!此处where子句不需要写where。这点切记！！
		long newRow = SQLiteDatabase.insert(String table, String nullColumnHack, ContentValues values)
		int affRows = SQLiteDatabase.update(String table, ContentValues values, String whereClause, String[] whereArgs)
		int affRows = SQLiteDatabase.delete(String table, String whereClause, String[] whereArgs)
		Cursor cursor=SQLiteDatabase.query(String table, String[] columns, String selection, String[] selectionArgs
											, String groupBy, String having, String orderBy)
										
		ContentValues cv = new ContentValues(); ContentValues类似集合。
		cv.put("name", "bb张三");
		cv.put("money", 777.0);
		db.insert("info", null, cv);
		db.close();
			
			优点:省去拼接sql的操作,减少错误
				返回值包含新增的行号 或 影响到的行数

			缺点:不能执行过于复杂的sql,比如多表查询..子查询...

	二.查看数据库中的数据
		~1.导出databases下的数据库文件,用SQLite expert工具查看

		~2.sqlite3 方式查看数据库中的数据
				chcp 65001（change code page，utf-8编码）
				将字体改为lucida console（解决中文乱码）
				adb shell
				cd 进入databases目录
				sqlite3 db1.db
				ls(显示目录下文件)

	三.sqlite中的事务管理
		事务:逻辑上的一组操作要么同时完成,要么同时不完成
		beginTransaction	setTransactionSuccessful	endTransaction
		案例：银行的转账
				
		   db.beginTransaction();
		   try {
		     ...
		     db.setTransactionSuccessful();
		   } finally {
		     db.endTransaction();
		   }

	四.把数据查询出来后显示到界面上
		~1.ScrollView嵌套LinerLayout，new TextView对象，设置好属性后将TextView对象添加到LinerLayout（ll.addView(tv)）。
				缺陷：对象都创建出来在内存里,显示其中的一部分,很容易内存溢出,界面崩溃。
		~2.ListView -- 饭店前门进后门出，无论有多少条 ,出了界面的item就会被垃圾回收，最终内存中只有一屏幕的对象,肯定没有内存溢出的问题了。
					!!listView的两个优化：复用view对象(演员再重新排队)，减少子控件id查询次数。
								创建新view对象时获得view的item的每个控件id，setTag保存，以后要用某个控件的时候直接取，不用每次都查找控件id	
				ListView就是用来显示一行一行的条目的。每一个条目都是一个View对象
				 MVC结构
					 M：model模型层，要显示的数据           ————people集合
					 V：view视图层，用户看到的界面          ————ListView
					 c：control控制层，操作数据如何显示     ————adapter对象
				 
		listView.setAdapter(ListAdapter --> BaseAdapter --> 继承BaseAdapter实现方法getCount和getView );
				 int getCount() {return list.size();} list中保存着所有要显示项目的JavaBean
				 View getView(int position, View convertView, ViewGroup parent)
					{
						View view = null;
						ViewHolder holder;//定义类对象，保存控件id，减少控件id查询次数。
						if(convertView == null){//这步判断很重要，只有在view不可重复使用时，才创建新的view，保证内存中只有一屏幕的view对象
							view = View.inflate(MainActivity.this, R.layout., null); //View.inflate 打气筒。将布局文件变成一个View对象
							holder = new ViewHolder();
							//item布局文件中包含了两个TextView tv_name和tv_money
							holder.tv_name = (TextView) view.findViewById(R.id.tv_name);
							holder.tv_money = (TextView) view.findViewById(R.id.tv_money);
							//把holder保存到view中，需要的时候直接getTag()就可以获得里面的数据了。
							view.setTag(holder);
						}else{
							view = convertView;
							holder = (ViewHolder) view.getTag();//获得保存到view中的数据holder，如果复用view对象不获取的话，下面的代码就会报错，holder空指针异常
						}
						//item布局文件中包含了两个TextView tv_name和tv_money，所以需要在这里设置一下相关属性
						Account acc = list.get(position);//最关键的就是从集合中取出正确位置的元素填充到相应的item中。
						holder.tv_name.setText(acc.getName());
						holder.tv_money.setText(acc.getMoney()+"");						
						return view;
					}
				//定义一个类保存item的控件id。定义为static，只加载一次，感觉效率又高了一点	
				static class ViewHolder {
					TextView tv_name;
					TextView tv_money;
				}
		Adapter接口
				|实现-- ListAdapter接口
				|实现-- SpinnerAdapter接口
									|--BaseAdapter抽象类，继承自Object，实现了接口ListAdapter和SpinnerAdapter ，所以可以用于ListView 和 Spinner
													BaseAdapter实现类有：ArrayAdapter<?>，SimpleAdapter，CursorAdapter
													
			SimpleAdapter(Context context, List< Map<String, ?> > data, int resource, String[] from, int[] to)迭代 批量修改多个TextView中的文字
				from中的列名必须是data集合包含的（map键名是string），to中的列名必须是resource布局文件中定义的（布局文件中的id都是int）
			ArrayAdapter<String>(Context context, int resource, int textViewResourceId, String[] objects) 迭代 修改一个TextView中的文字
				ArrayAdapter是需要泛型的，textViewResourceId是textView在resource布局文件中的Id，String[] objects则是迭代的array。
				
		ListView的更新
			BaseAdapter.notifyDataSetChanged()与setAdapter(adapter对象)执行后都会到getView方法实现更新，
			不同在于调用setAdapter的话,可以new新的adapter，view是空的需要重新创建
			而notifyDataSetChanged是之前的adapter和view实体。另一个区别setAdapter会使页面回到顶部，不会停留在之前的位置。
		
 
		布局填充器 -- 打气桶 -- 写布局文件,用打气筒将布局文件变成一个View对象,View提供findViewById()方法可以在View对象的内部获取其中的其他View
			~1.View.inflate 重点掌握，是view对底层方法的包装。下面两种了解即可。

			~2.通过LayoutInflater类from方法获得LayoutInflater--LayoutInflater.inflate()
				LayoutInflater factory = LayoutInflater.from(context); factory.inflate(resource, root);
			~3.最底层，通过系统服务获得LayoutInflater--LayoutInflater.inflate()
				LayoutInflater LayoutInflater =(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE).inflate(resource, root);

				查看View.inflate的实现方式
					 public static View inflate(Context context, int resource, ViewGroup root) {
						LayoutInflater factory = LayoutInflater.from(context);
						return factory.inflate(resource, root);
					}
				查看view.LayoutInflater.from(Context context)实现方式	
					public static LayoutInflater from(Context context) {
						LayoutInflater LayoutInflater =
								(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
						if (LayoutInflater == null) {
							throw new AssertionError("LayoutInflater not found.");
						}
						return LayoutInflater;
					}
				